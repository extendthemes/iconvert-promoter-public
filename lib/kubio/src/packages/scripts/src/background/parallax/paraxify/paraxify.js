// Generated by CoffeeScript 1.7.1

/*
 Paraxify.js - v0.1
 @author Jaime Caballero
 MIT license
 */
(function (document, window, index) {
	'use strict';
	let paraxify;
	paraxify = function (el, options) {
		let Paraxify, contador, i, opt, pho, posY, screenY;
		posY = 0;
		screenY = 0;
		i = 0;
		opt = {};
		pho = [];
		contador = 0;
		Paraxify = function (el, options) {
			this.options = {
				speed: 1,
				boost: 0,
			};
			for (i in options) {
				this.options[i] = options[i];
			}
			if (this.options.speed < 0 || this.options.speed > 1) {
				this.options.speed = 1;
			}
			if (!el) {
				el = 'paraxify';
			}
			this.photos = el;

			opt = this.options;
			pho = [this.photos];
			this._init(this);
		};
		Paraxify.prototype = {
			update() {
				screenY = window.innerHeight;
				i = 0;
				while (i < pho.length) {
					pho[i].style.backgroundPosition = 'center center';
					pho[i].url = window
						.getComputedStyle(pho[i], false)
						.backgroundImage.replace(
							/url\((['"])?(.*?)\1\)/gi,
							'$2'
						)
						.split(',')[0];
					if (!pho[i].img) {
						pho[i].img = new Image();
					}
					if (pho[i].url !== pho[i].img.src) {
						this._check(i);
						pho[i].img.src = pho[i].url;
					}
					i++;
				}
				this._animate();
			},
			destroy() {
				window.removeEventListener('resize', this.onResizeFunction);
				const scrollWrapper = this._getScrollWrapper();
				if (scrollWrapper) {
					scrollWrapper.removeEventListener(
						'scroll',
						this.onScrollFunction
					);
				}
			},
			_bindEventListenerFunctions() {
				if (!this.onScrollFunction) {
					this.onScrollFunction = this._animate.bind(this);
				}
				if (!this.onResizeFunction) {
					this.onResizeFunction = this.update.bind(this);
				}
			},
			_init() {
				this._bindEventListenerFunctions();
				this.update();
				this.__initListener();
				this._initPhotos();
			},

			__initListener() {
				window.addEventListener('resize', this.onResizeFunction);
				const scrollWrapper = this._getScrollWrapper();
				if (scrollWrapper) {
					scrollWrapper.addEventListener(
						'scroll',
						this.onScrollFunction,
						{ passive: true }
					);
				}
			},
			isInEditor() {
				const editorBody = document.querySelector(
					'body.block-editor-page'
				);
				return !!editorBody;
			},
			_getScrollWrapper() {
				if (!this.isInEditor()) {
					return window;
				}
				return document.querySelector('.edit-site-visual-editor');
			},
			_initPhotos() {
				for (let i = 0; i < pho.length; i++) {
					setTimeout(() => {
						this._initImageData(i);
					}, 0);
				}
			},
			_initImage(main, actualHeight) {
				if (main.bgSize === '' || main.bgSize === 'auto') {
					if (this.height < main.offsetHeight) {
						main.ok = false;
					} else {
						actualHeight = this.height;
						if (this.height < screenY) {
							actualHeight =
								actualHeight +
								(screenY - main.offsetHeight) * opt.speed;
						}
					}
				} else if (main.bgSize === 'cover') {
					if (screenY < main.offsetHeight) {
						main.ok = false;
					}
				} else {
					window.getComputedStyle(main, false).backgroundSize ===
						'cover';
					this._check(i);
				}
				main.diff = -(actualHeight - main.offsetHeight) * opt.speed;
				main.diff = main.diff - main.offsetHeight * opt.boost;
				// self.onScrollFunction();
				return {
					main,
					actualHeight,
				};
			},
			_initImageData(i) {
				let actualHeight, main;
				main = pho[i];
				const self = this;
				main.ok = true;
				main.bgSize = window.getComputedStyle(
					main,
					false
				).backgroundSize;
				actualHeight = screenY;
				if (pho[i].img.complete) {
					const result = this._initImage(main, actualHeight);
					main = result.main;
					actualHeight = result.actualHeight;
					self.onScrollFunction();
				}
				pho[i].img.onload = () => {
					const result = this._initImage(main, actualHeight);
					main = result.main;
					actualHeight = result.actualHeight;
					self.onScrollFunction();
				};
			},
			_check(i) {
				let actualHeight, main;
				main = pho[i];
				main.ok = true;
				main.bgSize = window.getComputedStyle(
					main,
					false
				).backgroundSize;
				actualHeight = screenY;
				pho[i].img.onload = () => {
					const result = this._initImage(main, actualHeight);
					main = result.main;
					actualHeight = result.actualHeight;
				};
			},
			_visible(i) {
				const offsetTop = this._getOffsetTop(pho[i]);
				if (
					posY + screenY > offsetTop &&
					posY < offsetTop + pho[i].offsetHeight
				) {
					return true;
				}
				return false;
			},
			_getOffsetTop(elem) {
				return window.pageYOffset + elem.getBoundingClientRect().top;
			},
			_animate() {
				let per, position;
				if (window.pageYOffset !== void 0) {
					posY = window.pageYOffset;
				} else {
					posY = (
						document.documentElement ||
						document.body.parentNode ||
						document.body
					).scrollTop;
				}
				i = 0;
				while (i < pho.length) {
					this._check(i);
					if (
						pho[i].ok &&
						window.getComputedStyle(pho[i], false)
							.backgroundAttachment === 'fixed' &&
						this._visible(i) &&
						pho[i].diff
					) {
						per =
							(posY - this._getOffsetTop(pho[i]) + screenY) /
							(pho[i].offsetHeight + screenY);
						position = pho[i].diff * (per - 0.5);
						if (pho[i].bgSize !== 'cover') {
							position =
								position + (screenY - pho[i].img.height) / 2;
						}
						position = Math.round(position * 100) / 100;
						position = `${position}px`;
					} else {
						position = 'center';
					}
					pho[i].style.backgroundPosition = 'center ' + position;
					i++;
				}
			},
		};
		return new Paraxify(el, options);
	};
	window.paraxify = paraxify;
})(document, window, 0);
