/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
	width: 100%;
	padding-right: ($grid-gutter-width * 0.5);
	padding-left: ($grid-gutter-width * 0.5);
	margin-right: auto;
	margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths(
	$max-widths: $container-max-widths,
	$breakpoints: $grid-breakpoints
) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row() {
	display: flex;
	flex-wrap: wrap;
	margin-right: math.div($grid-gutter-width, -2);
	margin-left: math.div($grid-gutter-width, -2);
}

@mixin make-col-ready() {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing
	padding-right: ($grid-gutter-width * 0.5);
	padding-left: ($grid-gutter-width * 0.5);
}

@mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 percentage(math.div($size, $columns));
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: percentage( math.div($size , $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: math.div($size, $columns);
	margin-left: if($num == 0, 0, percentage($num));
}

@mixin make-custom-horizontal-gutters(
	$gutter-sizes-by-media: $gutter-sizes-by-media,
	$breakpoints: $grid-breakpoints
) {
	@each $grid-breakpoint-name, $grid-breakpoint-value in $grid-breakpoints {
		@include media-breakpoint-up($grid-breakpoint-name, $grid-breakpoints) {
			$infix: breakpoint-infix($grid-breakpoint-name, $grid-breakpoints);
			$gutter-sizes: map-get(
				$gutter-sizes-by-media,
				$grid-breakpoint-name
			);
			@each $gutter-prefix, $gutter-value in $gutter-sizes {
				.#{$library-prefix}row.gutters-col#{$infix}-#{$gutter-prefix} {
					margin-left: -($gutter-value * 0.5);
					margin-right: -($gutter-value * 0.5);
					> .#{$library-prefix}col,
					> [class*='#{$library-prefix}col-'] {
						padding-left: $gutter-value * 0.5;
						padding-right: $gutter-value * 0.5;
					}
				}

				.#{$library-prefix}px#{$infix}-#{$gutter-prefix} {
					padding-left: $gutter-value * 0.5;
					padding-right: $gutter-value * 0.5;
				}

				.#{$library-prefix}px#{$infix}-#{$gutter-prefix}-remove {
					margin-left: -$gutter-value * 0.5;
					margin-right: -$gutter-value * 0.5;
				}

				.gutters-row#{$infix}-#{$gutter-prefix} {
					padding-left: ($gutter-value * 0.5);
					padding-right: ($gutter-value * 0.5);
				}
			}
		}
	}
}

@mixin make-custom-vertical-gutters(
	$gutter-sizes-by-media: $gutter-sizes-by-media,
	$breakpoints: $grid-breakpoints
) {
	@each $grid-breakpoint-name, $grid-breakpoint-value in $grid-breakpoints {
		@include media-breakpoint-up($grid-breakpoint-name, $grid-breakpoints) {
			$infix: breakpoint-infix($grid-breakpoint-name, $grid-breakpoints);
			$gutter-sizes: map-get(
				$gutter-sizes-by-media,
				$grid-breakpoint-name
			);
			@each $gutter-prefix, $gutter-value in $gutter-sizes {
				.#{$library-prefix}row.gutters-col-v#{$infix}-#{$gutter-prefix} {
					margin-top: -($gutter-value * 0.5);
					margin-bottom: -($gutter-value * 0.5);
					> .#{$library-prefix}col,
					> [class*='#{$library-prefix}col-'] {
						padding-top: $gutter-value * 0.5;
						padding-bottom: $gutter-value * 0.5;
					}
				}
				.v-inner#{$infix}-#{$gutter-prefix} {
					padding-top: $gutter-value * 0.5;
					padding-bottom: $gutter-value * 0.5;
				}

				.gutters-row-v#{$infix}-#{$gutter-prefix} {
					padding-top: ($gutter-value * 0.5);
					padding-bottom: ($gutter-value * 0.5);
				}
			}
		}
	}
}

/// Grid system for custom gutters
//
// Generate semantic grid columns with these mixins.

@mixin make-section-boxed-container() {
	width: 100%;
	padding-right: 0;
	padding-left: 0;
	margin-right: auto;
	margin-left: auto;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-section-boxed-container-max-widths(
	$max-widths: $container-max-widths,
	$breakpoints: $grid-breakpoints
) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}
